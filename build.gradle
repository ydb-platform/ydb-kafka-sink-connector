plugins {
    id 'java'
}

group = 'ydb.kafka.connector'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

allprojects {
    tasks.withType(JavaCompile).tap {
        configureEach {
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
        }
    }
}

var ydbSdkVersion = libs.versions.ydbSdk.get()
var ydbAuthVersion = libs.versions.ydbAuth.get()
var lombokVersion = libs.versions.lombok.get()
var junitVersion = libs.versions.junit.get()
var connectApi = libs.versions.kafkaConnectApi.get()
var slf4jSimple = libs.versions.slf4jSimple.get()

dependencies {
    implementation "org.apache.kafka:connect-api:${connectApi}"
    implementation "org.slf4j:slf4j-simple:${slf4jSimple}"

    implementation "tech.ydb:ydb-sdk-bom:${ydbSdkVersion}"
    implementation "tech.ydb:ydb-sdk-scheme:${ydbSdkVersion}"
    implementation "tech.ydb:ydb-sdk-table:${ydbSdkVersion}"
    implementation "tech.ydb:ydb-sdk-topic:${ydbSdkVersion}"
    implementation "tech.ydb:ydb-sdk-coordination:${ydbSdkVersion}"
    implementation "tech.ydb.auth:yc-auth-provider-shaded:${ydbAuthVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation "org.junit.jupiter:junit-jupiter"
}

test {
    useJUnitPlatform()
}

// Путь к директории для загрузки зависимостей.
def downloadPath = "${buildDir.toString()}/libs"

def libs = [ // библиотеки, которые надо добавить в kafka/libs для запуска коннектора
             "perfmark-api",
             "guava",
             "ydb-sdk-core",
             "ydb-sdk-table",
             "ydb-auth-api",
             "ydb-proto-api",
             "grpc-stub",
             "grpc-protobuf",
             "grpc-netty-shaded",
             "grpc-protobuf-lite",
             "grpc-core",
             "grpc-api",
             "grpc-context",
             "protobuf-java",
             "yc-auth-provider-shaded",
             "bcprov-jdk15on",
             "ydb-sdk-coordination",
             "ydb-sdk-scheme",
             "animal-sniffer-annotations",
             "annotations",
             "annotations",
             "apiguardian-api",
             "checker-compat-qual",
             "commons-logging",
             "connect-api",
             "error_prone_annotations",
             "failureaccess",
             "grpc-services",
             "gson",
             "j2objc-annotations",
             "jackson-annotations",
             "jackson-core",
             "jackson-databind",
             "javax.annotation-api",
             "javax.ws.rs-api",
             "jjwt-api",
             "jjwt-impl",
             "jjwt-jackson",
             "jsr305",
             "junit-jupiter-api",
             "junit-jupiter-engine",
             "junit-jupiter-params",
             "junit-jupiter",
             "junit-platform-commons",
             "junit-platform-engine",
             "kafka-clients",
             "lombok",
             "lz4-java",
             "lzo-core",
             "opentest4j",
             "proto-google-common-protos",
             "protobuf-java-util",
             "snappy-java",
             "ydb-sdk-topic",
             "zstd-jni", // + не забыть добавить сам исполняемый коннектор
]

tasks.register('downloadDependencies', Copy) {
    // Гарантируем, что задачи компиляции выполняются до загрузки зависимостей,
    // чтобы все нужные артефакты были разрешены
    dependsOn configurations.runtimeClasspath
    dependsOn configurations.compileClasspath
    // Создание директории, если она не существует
    File libsDir = file(downloadPath)
    if (!libsDir.exists()) {
        libsDir.mkdirs()
    }
    // Конфигурации, для которых следует скачать зависимости
    // Можно добавить другие конфигурации в зависимости от потребностей проекта
    configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (libs.contains(artifact.name)) {
            from artifact.file
        }
    }
    configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (libs.contains(artifact.name)) {
            from artifact.file
        }
    }

    // Место назначения для загрузки
    into downloadPath
}

tasks.register("prepareKafkaConnectDependencies") {
    dependsOn build
    dependsOn downloadDependencies
}