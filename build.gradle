plugins {
    id 'java'
}

group = 'ydb.kafka.connector'
version = '1.0-SNAPSHOT'

ext {
    set('connectApi', '2.8.0')
    set('slf4jSimple', '1.7.30')
    set('jsonPath', '2.6.0')
}

repositories {
    mavenCentral()
}

allprojects { // на  более новые версии ругается Kafka Connect
    tasks.withType(JavaCompile).tap {
        configureEach {
            sourceCompatibility = '1.8'
            targetCompatibility = '1.8'
        }
    }
}

var ydbSdkVersion = libs.versions.ydbSdk.get()
var lombokVersion = libs.versions.lombok.get()
var junitVersion = libs.versions.junit.get()

dependencies {
    implementation "org.apache.kafka:connect-api:${connectApi}"
    implementation "org.slf4j:slf4j-simple:${slf4jSimple}"

    implementation "tech.ydb:ydb-sdk-bom:${ydbSdkVersion}"
    implementation "tech.ydb:ydb-sdk-scheme:${ydbSdkVersion}"
    implementation "tech.ydb:ydb-sdk-table:${ydbSdkVersion}"
    implementation "tech.ydb:ydb-sdk-topic:${ydbSdkVersion}"
    implementation "tech.ydb:ydb-sdk-coordination:${ydbSdkVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation "org.junit.jupiter:junit-jupiter"
}

test {
    useJUnitPlatform()
}

// Путь к директории для загрузки зависимостей.
def downloadPath = "${buildDir.toString()}/libs"

def libs = [ // библиотеки, которые надо добавить в kafka/libs для запуска коннектора
        "perfmark-api",
        "guava",
        "ydb-sdk-core",
        "ydb-sdk-table",
        "ydb-auth-api",
        "ydb-proto-api",
        "grpc-stub",
        "grpc-protobuf",
        "grpc-netty-shaded",
        "grpc-protobuf-lite",
        "grpc-core",
        "grpc-api",
        "grpc-context",
        "protobuf-java" // + не забыть добавить сам исполняемый коннектор
]

tasks.register('downloadDependencies', Copy) {
    // Гарантируем, что задачи компиляции выполняются до загрузки зависимостей,
    // чтобы все нужные артефакты были разрешены
    dependsOn configurations.runtimeClasspath
    dependsOn configurations.compileClasspath
    // Создание директории, если она не существует
    File libsDir = file(downloadPath)
    if (!libsDir.exists()) {
        libsDir.mkdirs()
    }
    // Конфигурации, для которых следует скачать зависимости
    // Можно добавить другие конфигурации в зависимости от потребностей проекта
    configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (libs.contains(artifact.name)) {
            from artifact.file
        }
    }
    configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (libs.contains(artifact.name)) {
            from artifact.file
        }
    }

    // Место назначения для загрузки
    into downloadPath
}

tasks.register("prepareKafkaConnectDependencies") {
    dependsOn build
    dependsOn downloadDependencies
}